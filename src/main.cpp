// #include <Arduino.h>
// #include <WiFi.h>
// #include <HTTPClient.h>
// #include <ArduinoJson.h>
// #include <Adafruit_NeoPixel.h>
// #include <SwitecX25.h>

// // ‚úÖ WiFi Credentials
// #define WIFI_SSID "Tressi"
// #define WIFI_PASSWORD "00000000"

// // ‚úÖ Flask Server Endpoint - Need to create this endpoint on your server
// #define SERVER_URL "http://10.19.70.23:5001/get_emotion"

// // ‚úÖ Pin Definitions
// #define BUZZER_PIN 2    // GPIO 2 for Buzzer
// #define LED_PIN 4       // GPIO 4 for WS2812B LED
// #define MOTOR_PIN1 23
// #define MOTOR_PIN2 22
// #define MOTOR_PIN3 21
// #define MOTOR_PIN4 19

// // ‚úÖ Stepper Motor Setup (X27 168 Motor)
// SwitecX25 motor(315, MOTOR_PIN1, MOTOR_PIN2, MOTOR_PIN3, MOTOR_PIN4);

// // ‚úÖ LED Strip Setup
// #define NUM_LEDS 1
// Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// WiFiClient client;
// HTTPClient http;

// // ‚úÖ Function to Map Emotions to LED Colors & Motor Positions
// struct Emotion {
//     const char* name;
//     uint32_t color;
//     int motorPos;
// };

// // üé≠ Emotion Mapping
// Emotion emotions[] = {
//     {"happy", strip.Color(255, 255, 0), 0},      
//     {"sad", strip.Color(0, 0, 255), 60},         
//     {"angry", strip.Color(255, 0, 0), 120},      
//     {"calm", strip.Color(0, 255, 255), 180},     
//     {"surprised", strip.Color(255, 165, 0), 240},
//     {"neutral", strip.Color(255, 255, 255), 300}  
// };

// void setup() {
//     Serial.begin(115200);
//     pinMode(BUZZER_PIN, OUTPUT);
//     strip.begin();
//     strip.show();

//     // ‚úÖ Initialize Stepper Motor (Zero Position)
//     motor.zero();
//     while (motor.currentStep != 0) {
//         motor.update();  // Ensure it fully resets
//     }

//     // üîÑ Connect to WiFi
//     WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
//     Serial.print("Connecting to WiFi...");
    
//     int attempts = 0;
//     while (WiFi.status() != WL_CONNECTED && attempts < 20) { 
//         Serial.print(".");
//         delay(1000);
//         attempts++;
//     }

//     if (WiFi.status() == WL_CONNECTED) {
//         Serial.println("\nüöÄ WiFi Connected!");
//         Serial.print("IP Address: ");
//         Serial.println(WiFi.localIP());
//     } else {
//         Serial.println("\n‚ùå WiFi Connection Failed!");
//     }
// }

// void loop() {
//     Serial.println("üîÑ Checking for Emotion Data...");
    
//     // üîΩ Get Data from Flask Server
//     http.begin(client, SERVER_URL);
//     int httpResponseCode = http.GET();
    
//     if (httpResponseCode > 0) {
//         String response = http.getString();
//         Serial.println("üì• Received: " + response);

//         // üìú Parse JSON Response
//         StaticJsonDocument<200> jsonDoc;
//         DeserializationError error = deserializeJson(jsonDoc, response);
//         if (error) {
//             Serial.println("‚ùå JSON Parsing Failed!");
//         } else {
//             String emotion = jsonDoc["emotion"];

//             // üîä Buzzer Alert
//             tone(BUZZER_PIN, 1000, 200);
//             delay(200);
//             noTone(BUZZER_PIN);

//             // üåà Set LED Color & Move Stepper Motor
//             for (Emotion e : emotions) {
//                 if (emotion == e.name) {
//                     strip.setPixelColor(0, e.color);
//                     strip.show();

//                     // ‚úÖ Correct Stepper Motor Movement
//                     motor.setPosition(e.motorPos);  
//                     while (motor.currentStep != motor.targetStep) {
//                         motor.update();  // Ensures smooth motion
//                     }

//                     Serial.print("üé≠ Emotion Detected: ");
//                     Serial.println(emotion);
//                     break;
//                 }
//             }
//         }
//     } else {
//         Serial.println("‚ùå Error Fetching Data from Server!");
//     }

//     http.end();
//     delay(5000); // Wait before checking again
// }

// #include <Arduino.h>
// #include <esp_now.h>
// #include <WiFi.h>

// #define BUZZER_PIN 5  // ËúÇÈ∏£Âô®
// #define MOTOR_PIN 6   // ÁîµÊú∫
// #define LED_R 9       // Á∫¢Ëâ≤ LED
// #define LED_G 10      // ÁªøËâ≤ LED
// #define LED_B 11      // ËìùËâ≤ LED

// typedef struct {
//     uint8_t r;
//     uint8_t g;
//     uint8_t b;
// } SensorData;

// SensorData receivedData;

// void onReceive(const uint8_t * mac, const uint8_t *incomingData, int len) {
//     memcpy(&receivedData, incomingData, sizeof(receivedData));

//     Serial.printf("üé® Received Color: R=%d, G=%d, B=%d\n", receivedData.r, receivedData.g, receivedData.b);

//     // **ÊéßÂà∂ LED ÊòæÁ§∫È¢úËâ≤**
//     analogWrite(LED_R, receivedData.r);
//     analogWrite(LED_G, receivedData.g);
//     analogWrite(LED_B, receivedData.b);

//     // **Ëß¶ÂèëËúÇÈ∏£Âô®**
//     digitalWrite(BUZZER_PIN, HIGH);
//     delay(200);
//     digitalWrite(BUZZER_PIN, LOW);

//     // **ËΩ¨Âä®ÁîµÊú∫**
//     digitalWrite(MOTOR_PIN, HIGH);
//     delay(500);
//     digitalWrite(MOTOR_PIN, LOW);
// }

// void setup() {
//     Serial.begin(115200);
//     pinMode(BUZZER_PIN, OUTPUT);
//     pinMode(MOTOR_PIN, OUTPUT);
//     pinMode(LED_R, OUTPUT);
//     pinMode(LED_G, OUTPUT);
//     pinMode(LED_B, OUTPUT);

//     WiFi.mode(WIFI_STA);
//     if (esp_now_init() != ESP_OK) {
//         Serial.println("‚ùå ESP-NOW Init Failed");
//         return;
//     }
//     esp_now_register_recv_cb(onReceive);
    
// }

// void loop() {
//     delay(100);
// }

#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEClient.h>
#include <BLE2902.h>
#include <Adafruit_NeoPixel.h>
#include <SwitecX25.h>  // X27 168 Ê≠•ËøõÁîµÊú∫È©±Âä®Â∫ì

#define BUZZER_PIN 2    
#define LED_PIN 4       
#define MOTOR_PIN1 23  // A+
#define MOTOR_PIN2 22  // A-
#define MOTOR_PIN3 21  // B+
#define MOTOR_PIN4 19  // B-

// **UUID**
static BLEUUID serviceUUID("135a9a46-55dc-41a0-8671-b4dae2a33cd8");
static BLEUUID charUUID("10b9e029-fe24-41fa-939e-1f6c189f5593");

bool deviceConnected = false;
BLERemoteCharacteristic* pRemoteCharacteristic;
BLEAdvertisedDevice* myDevice;

#define NUM_LEDS 20  
Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// **X27 168 ÁîµÊú∫ÂØπË±°**
SwitecX25 motor(315 * 3, MOTOR_PIN1, MOTOR_PIN2, MOTOR_PIN3, MOTOR_PIN4);  // 315¬∞ ÁîµÊú∫

// **‰∏ä‰∏ÄÊ¨°Êé•Êî∂Âà∞ÁöÑ RGB Êï∞ÊçÆ**
String lastReceivedData = "";

// **Ê≠•ËøõÁîµÊú∫ÊóãËΩ¨ËßíÂ∫¶ÔºàÂè™ÈÄâÊã© 5¬∞, 10¬∞, 15¬∞, 20¬∞Ôºâ**
const int motorAngles[] = {45, 90};

// **BLE ËÆæÂ§áÂèëÁé∞ÂõûË∞É**Ôºà**Á°Æ‰øùÂÆÉÂú® setup() ‰πãÂâçÂÆö‰πâ**Ôºâ
class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
    void onResult(BLEAdvertisedDevice advertisedDevice) {
        Serial.print("üîç Found Device: ");
        Serial.println(advertisedDevice.getName().c_str());

        if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {
            Serial.println("‚úÖ Found Sensor Device!");
            BLEDevice::getScan()->stop();
            myDevice = new BLEAdvertisedDevice(advertisedDevice);
            deviceConnected = true;
        }
    }
};

// **BLE ËøûÊé•ÂõûË∞É**
class MyClientCallbacks : public BLEClientCallbacks {
    void onConnect(BLEClient* pclient) { 
        Serial.println("‚úÖ Connected to Sensor!"); 
    }

    void onDisconnect(BLEClient* pclient) { 
        Serial.println("‚ùå Disconnected! Retrying...");
        deviceConnected = false;
        BLEDevice::getScan()->start(5, false);
    }
};

// **ÂàùÂßãÂåñ**
void setup() {
    Serial.begin(115200);

    // **ÂàùÂßãÂåñ LED**
    strip.begin();
    strip.show();  
    strip.setBrightness(50);

    // **ÂàùÂßãÂåñËúÇÈ∏£Âô®**
    pinMode(BUZZER_PIN, OUTPUT);

    // **ÂàùÂßãÂåñ X27 168 ÁîµÊú∫**
    motor.zero();  // ÂΩíÈõ∂ÔºàÈáçË¶ÅÔºÅÔºâ
    delay(1000);

    // **ÂàùÂßãÂåñ BLE**
    Serial.println("üöÄ Starting BLE Client...");
    BLEDevice::init("");
    BLEDevice::setMTU(517);

    BLEScan* pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());  // ‚úÖ Á°Æ‰øùËøô‰∏™Á±ªÂ∑≤ÁªèÂÆö‰πâ
    pBLEScan->setActiveScan(true);
    pBLEScan->start(5, false);
}

// **ËÆæÁΩÆ LED È¢úËâ≤**
void setLEDColor(int r, int g, int b) {
    for (int i = 0; i < NUM_LEDS; i++) {
        strip.setPixelColor(i, strip.Color(r, g, b));
    }
    strip.show();
    Serial.println("üí° LED Strip Updated!");
}

// **Êí≠ÊîæÂç°ÂÜú**
void playCanon() {
    Serial.println("üéµ Playing Canon...");
    int melody[] = {262, 294, 330, 349, 392, 440, 494, 523};
    int durations[] = {400, 400, 400, 400, 400, 400, 400, 400};

    for (int i = 0; i < 8; i++) {
        tone(BUZZER_PIN, melody[i], durations[i]);
        delay(durations[i] * 1.2);
    }
    noTone(BUZZER_PIN);
}

// **ÊóãËΩ¨ X27 168**
void rotateMotor() {
    int randomIndex = random(0, 2);  // ÈöèÊú∫ÈÄâÊã© 45¬∞ Êàñ 90¬∞ÔºåÁ°Æ‰øùÁ¥¢Âºï‰∏ç‰ºöË∂äÁïå
    int angle = motorAngles[randomIndex];

    Serial.print("üîÑ Rotating Motor: ");
    Serial.print(angle);
    Serial.println("¬∞");

    // **Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂú®ËØ•‰ΩçÁΩÆÔºåÈò≤Ê≠¢ÈáçÂ§çÊåá‰ª§Êó†Êïà**
    int targetPosition = (angle * 315) / 360;
    if (motor.targetStep == targetPosition) {
        Serial.println("‚ö†Ô∏è Motor already at this position, skipping...");
        return;
    }

    // **ËÆæÁΩÆÁõÆÊ†á‰ΩçÁΩÆ**
    motor.setPosition(targetPosition);

    // **Á°Æ‰øù motor.update() ÈÄêÊ≠•ÊâßË°åÔºåÁõ¥Âà∞Âà∞ËææÁõÆÊ†á**
    while (motor.currentStep != motor.targetStep) {
        motor.update();
        delay(1);  // **Â∞èÂª∂Êó∂ÔºåÈò≤Ê≠¢ËøáÂø´ÂØºËá¥ÁîµÊú∫Âç°‰Ωè**
    }

    Serial.println("‚úÖ Motor move completed!");
}

// **BLE Êï∞ÊçÆÂõûË∞É**
static void notifyCallback(
    BLERemoteCharacteristic* pBLERemoteCharacteristic,
    uint8_t* pData,
    size_t length,
    bool isNotify) {

    Serial.print("üé® Received Data: ");
    String receivedData = "";
    for (size_t i = 0; i < length; i++) receivedData += (char)pData[i];
    Serial.println(receivedData);

    // **Â¶ÇÊûúÊî∂Âà∞ÁöÑÊï∞ÊçÆÂíå‰∏äÊ¨°‰∏ÄÊ†∑ÔºåÂàô‰∏çÊâßË°å**
    if (receivedData == lastReceivedData) {
        Serial.println("‚ö†Ô∏è Same data received, skipping...");
        return;
    }

    int r, g, b;
    if (sscanf(receivedData.c_str(), "%d,%d,%d", &r, &g, &b) == 3) {
        Serial.println("‚úÖ Valid RGB data received!");
        setLEDColor(r, g, b);
        playCanon();
        rotateMotor();  // **Á°Æ‰øùÁîµÊú∫Âè™Âú®Êé•Êî∂Êñ∞Êï∞ÊçÆÊó∂ËΩ¨Âä®**

        // **Â≠òÂÇ®ËøôÊ¨°ÁöÑ RGB Êï∞ÊçÆ**
        lastReceivedData = receivedData;
    } else {
        Serial.println("‚ö†Ô∏è Invalid data received, ignoring...");
    }
}

// **‰∏ªÂæ™ÁéØ**
void loop() {
    if (deviceConnected && myDevice) {
        BLEClient* pClient = BLEDevice::createClient();
        pClient->setClientCallbacks(new MyClientCallbacks());

        if (pClient->connect(myDevice)) {
            Serial.println("‚úÖ Connected to Sensor!");
            BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
            if (pRemoteService) {
                pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
                if (pRemoteCharacteristic) {
                    if (pRemoteCharacteristic->canNotify()) {  
                        pRemoteCharacteristic->registerForNotify(notifyCallback);
                        Serial.println("‚úÖ Registered for Notifications!");
                    }
                }
            }
        }
    }

    // **‰øùÊåÅ BLE ËøûÊé•**
    if (deviceConnected) {
        Serial.println("‚úÖ BLE Connected, waiting for data...");
        delay(1000);
    } else {
        Serial.println("üîÑ Re-scanning BLE devices...");
        BLEDevice::getScan()->start(5, false);
    }
}